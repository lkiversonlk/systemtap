#! /usr/bin/env stap

/**
 * 
 * 
 */

global start
global time_io

function timestamp:long() {return gettimeofday_us() - start }

function proc:string() {return sprintf("%d (%s)", pid(), execname()) }

probe begin { start = gettimeofday_us() }

global filehandlers, fileread, filewrite

probe syscall.open.return {
    filename = user_string($filename)
    if($return != -1) {
        filehandlers[pid(), $return] = filename
    } else {
        printf("%d %s access %s fail\n", timestamp(), proc(), filename)
    }
}

probe syscall.read.return {
    p = pid()
    fd = $fd
    bytes = $return
    time = gettimeofday_us() - @entry(gettimeofday_us())   /* @entry will record the function value at entry */
    if(bytes > 0){
        fileread[p, fd] += bytes
    }
    time_io[p, fd] <<< time
}

probe syscall.write.return {
    p = pid()
    fd = $fd
    bytes = $return 
    time = gettimeofday_us() - @entry(gettimeofday_us())
    if(bytes > 0) {
        filewrite[p, fd] += bytes
    }
    time_io[p, fd] <<< time
}

probe syscall.close {
    if([pid(), $fd] in filehandlers) {
        printf("%d %s access %s read: %d write %d \n",
            timestamp(), proc(), filehandlers[pid(), $fd], 
            fileread[pid(), $fd], filewrite[pid(), $fd])
        if(@count(time_io[pid(), $fd])) {
            printf("%d %s iotime %s time: %d\n", timestamp(), proc(),
            filehandlers[pid(), $fd], @sum(time_io[pid(), $fd]))
        }
    } 
    delete fileread[pid(), $fd]
    delete fileread[pid(), $fd]
    delete time_io[pid(), $fd]
}